pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        DEPLOY_SERVER_CREDENTIALS = 'ec2-ssh-key'
        DEPLOY_SERVER = 'ubuntu@k11d101.p.ssafy.io'
        CHECK_SERVER = 'k11d101.p.ssafy.io'
        PROJECT_ROOT = '/home/ubuntu'
        SERVICE_NAME = 'config-service'
        SERVICE_DIR = "backend/${SERVICE_NAME}"
        IMAGE_NAME = "yechanissm2/${SERVICE_NAME}"
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    def buildRequired = false
                    for (changeSet in currentBuild.changeSets) {
                        for (entry in changeSet.items) {
                            for (file in entry.affectedFiles) {
                                if (file.path.startsWith("${SERVICE_DIR}/")) {
                                    buildRequired = true
                                    echo "Changes detected in ${SERVICE_NAME}. Proceeding with build."
                                    break
                                }
                            }
                            if (buildRequired) {
                                break
                            }
                        }
                        if (buildRequired) {
                            break
                        }
                    }
                    env.BUILD_REQUIRED = buildRequired.toString()
                    echo "BUILD_REQUIRED: ${env.BUILD_REQUIRED}"
                }
            }
        }

        stage('Copy Secret File') {
            when {
                expression { return env.BUILD_REQUIRED == 'true' }
            }
            steps {
                withCredentials([file(credentialsId: 'application-yml', variable: 'APPLICATION_YML')]) {
                    sh """
                        mkdir -p backend/${SERVICE_NAME}/src/main/resources
                        cp ${APPLICATION_YML} backend/${SERVICE_NAME}/src/main/resources/application.yml
                    """
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression { return env.BUILD_REQUIRED == 'true' }
            }
            steps {
                script {
                    docker.build("${env.IMAGE_NAME}:latest", "--no-cache -f backend/${SERVICE_NAME}/Dockerfile backend/${SERVICE_NAME}")
                }
            }
        }

        stage('Push to DockerHub') {
            when {
                expression { return env.BUILD_REQUIRED == 'true' }
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKERHUB_CREDENTIALS) {
                        docker.image("${env.IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to Server') {
            when {
                expression { return env.BUILD_REQUIRED == 'true' }
            }
            steps {
                sshagent([env.DEPLOY_SERVER_CREDENTIALS]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${env.DEPLOY_SERVER} '
                            cd ${env.PROJECT_ROOT} &&
                            docker-compose stop ${SERVICE_NAME} &&
                            docker-compose rm -f ${SERVICE_NAME} &&
                            docker-compose pull ${SERVICE_NAME} &&
                            docker-compose up -d --force-recreate --no-deps ${SERVICE_NAME} &&
                            docker image prune -f --filter "dangling=true"
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.BUILD_REQUIRED == 'true') {
                    mattermostSend(color: 'good', message: "Config Service 배포 성공.")
                } else {
                    echo "Config Service 변경 사항 없음. 빌드 및 배포를 건너뜁니다."
                }
            }
        }
        failure {
            script {
                if (env.BUILD_REQUIRED == 'true') {
                    mattermostSend(color: 'danger', message: "Config Service 배포 실패. 수동 확인이 필요합니다.")
                }
            }
        }
    }
}
